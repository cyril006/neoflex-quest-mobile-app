import 'package:flutter/material.dart';
import 'package:confetti/confetti.dart';
import 'dart:async';
import 'package:neoquest/theme/neoquest.dart';
import 'package:neoquest/widgets/custom_button.dart';

class OfficeSimulatorScreen extends StatefulWidget {
  const OfficeSimulatorScreen({Key? key}) : super(key: key);

  @override
  State<OfficeSimulatorScreen> createState() => _OfficeSimulatorScreenState();
}

class _OfficeSimulatorScreenState extends State<OfficeSimulatorScreen> {
  final _confettiController =
      ConfettiController(duration: const Duration(seconds: 2));
  int _currentStep = 0;

  @override
  void dispose() {
    _confettiController.dispose();
    super.dispose();
  }

  final List<_SimStep> _steps = [
    _SimStep(
      title: '–í—Ö–æ–¥ –∏ –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ',
      description:
          'üö™ –¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–º –¥–≤–µ—Ä—è–º –∫–æ–º–ø–∞–Ω–∏–∏ NeoQuest. –û—Ö—Ä–∞–Ω–Ω–∏–∫ –ø—Ä–æ—Å–∏—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫. –û–¥–∏–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ‚Äî –∏ —Ç—Ä–µ–≤–æ–≥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.',
      actionLabel: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫',
      miniGame: _scanBadgeGame,
    ),
    _SimStep(
      title: '–ü–æ–∏—Å–∫ —É–ª–∏–∫',
      description:
          'üîé –¢—ã –æ–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞. –ù–∞ —Å—Ç–æ–ª–µ ‚Äî –∑–∞–ø–∏—Å–∫–∏, USB‚Äë–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –∏ –æ—Ç–∫—Ä—ã—Ç –Ω–æ—É—Ç–±—É–∫.',
      actionLabel: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–æ–ª',
      miniGame: _memoryClueGame,
    ),
    _SimStep(
      title: '–í–∑–ª–æ–º —Å–∏—Å—Ç–µ–º—ã',
      description:
          'üíª –ù–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–∞—Ä–æ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–∑–ª–æ–º–∞—Ç—å –∑–∞–º–æ–∫ —Å –ø–æ–º–æ—â—å—é –ª–æ–≥–∏—á–µ—Å–∫–æ–π –º–∏–Ω–∏‚Äë–∏–≥—Ä—ã.',
      actionLabel: '–ù–∞—á–∞—Ç—å –≤–∑–ª–æ–º',
      miniGame: _hackingSliderGame,
    ),
    _SimStep(
      title: '–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞',
      description:
          'üì® –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –í –æ—Ç—á—ë—Ç–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –£–ø–æ—Ä—è–¥–æ—á—å —Å–æ–±—ã—Ç–∏—è –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏.',
      actionLabel: '–°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç',
      miniGame: _orderingGame,
    ),
  ];

  void _onStepContinue() {
    if (_currentStep < _steps.length - 1) {
      setState(() => _currentStep++);
    } else {
      _confettiController.play();
    }
  }

  void _onStepCancel() {
    if (_currentStep > 0) setState(() => _currentStep--);
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      backgroundColor: NeoQuestTheme.backgroundColor,
      appBar: AppBar(
        backgroundColor: NeoQuestTheme.primaryColor,
        title: Text('Office Detective',
            style: theme.textTheme.titleLarge?.copyWith(color: Colors.white)),
        centerTitle: true,
        elevation: 0,
      ),
      body: Stack(
        children: [
          Stepper(
            currentStep: _currentStep,
            type: StepperType.vertical,
            onStepContinue: () async {
              await _steps[_currentStep].miniGame(context);
              _onStepContinue();
            },
            onStepCancel: _onStepCancel,
            controlsBuilder: (context, details) {
              return Padding(
                padding: const EdgeInsets.only(top: 16),
                child: Row(
                  children: [
                    CustomButton(
                      text: _currentStep < _steps.length - 1
                          ? '–í—ã–ø–æ–ª–Ω–∏—Ç—å'
                          : '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
                      onPressed: details.onStepContinue!,
                    ),
                    const SizedBox(width: 8),
                    if (_currentStep > 0)
                      TextButton(
                        onPressed: details.onStepCancel,
                        child: Text('–ù–∞–∑–∞–¥', style: theme.textTheme.bodyMedium),
                      ),
                  ],
                ),
              );
            },
            steps: _steps.map((step) {
              int index = _steps.indexOf(step);
              return Step(
                title: Text(step.title, style: theme.textTheme.bodyLarge),
                content:
                    Text(step.description, style: theme.textTheme.bodyMedium),
                isActive: _currentStep >= index,
                state: _currentStep > index
                    ? StepState.complete
                    : StepState.indexed,
              );
            }).toList(),
          ),
          Align(
            alignment: Alignment.topCenter,
            child: ConfettiWidget(
              confettiController: _confettiController,
              blastDirectionality: BlastDirectionality.explosive,
              numberOfParticles: 20,
              colors: const [
                NeoQuestTheme.accentColor,
                NeoQuestTheme.highlightColor,
                NeoQuestTheme.primaryColor,
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// Definition of a simulation step with an attached mini-game
class _SimStep {
  final String title;
  final String description;
  final String actionLabel;
  final Future<void> Function(BuildContext) miniGame;

  _SimStep({
    required this.title,
    required this.description,
    required this.actionLabel,
    required this.miniGame,
  });
}

// Example mini-games:
Future<void> _scanBadgeGame(BuildContext context) async {
  // Simple dialog simulation
  return showDialog(
    context: context,
    builder: (c) => AlertDialog(
      title: const Text('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞'),
      content: const Text('–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...'),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(c),
          child: const Text('–ì–æ—Ç–æ–≤–æ'),
        ),
      ],
    ),
  );
}

Future<void> _memoryClueGame(BuildContext context) async {
  List<String> clues = ['USB', '–ó–∞–ø–∏—Å–∫–∞'];
  return showDialog(
    context: context,
    builder: (c) => AlertDialog(
      title: const Text('–ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏'),
      content: Text(
          '–í—Å–ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤—ã –≤–∏–¥–µ–ª–∏: ${clues.join(' –∏ ')}.'),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(c),
          child: const Text('–î–∞, —ç—Ç–æ –æ–Ω–∏'),
        ),
      ],
    ),
  );
}

Future<void> _hackingSliderGame(BuildContext context) async {
  double val = 0.0;
  return showDialog(
    context: context,
    builder: (c) => StatefulBuilder(
      builder: (c, setState) => AlertDialog(
        title: const Text('–ú–∏–Ω–∏‚Äë–∏–≥—Ä–∞: –≤–∑–ª–æ–º'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ –Ω–∞ 80%'),
            Slider(
              value: val,
              onChanged: (v) => setState(() => val = v),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(c),
            child: const Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'),
          ),
        ],
      ),
    ),
  );
}

Future<void> _orderingGame(BuildContext context) async {
  List<String> events = ['–í–∑–ª–æ–º —Å–∏—Å—Ç–µ–º—ã', '–í—Ö–æ–¥ –≤ –æ—Ñ–∏—Å', '–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞'];
  return showDialog(
    context: context,
    builder: (c) => AlertDialog(
      title: const Text('–£–ø–æ—Ä—è–¥–æ—á—å—Ç–µ —Å–æ–±—ã—Ç–∏—è'),
      content: const Text(
          '–ü–æ—Ä—è–¥–æ–∫: –í—Ö–æ–¥ –≤ –æ—Ñ–∏—Å -> –í–∑–ª–æ–º —Å–∏—Å—Ç–µ–º—ã -> –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞'),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(c),
          child: const Text('–ì–æ—Ç–æ–≤–æ'),
        ),
      ],
    ),
  );
}
